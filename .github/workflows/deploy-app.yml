name: Deploy to Server

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Deploy to server
      env:
        SERVER_USER: ${{ secrets.SERVER_USER_APP }}
        SERVER_IP: ${{ secrets.SERVER_IP_APP }}
        SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD_APP }}
      run: |
        # Create a tarball of the project
        git archive --format=tar.gz -o project.tar.gz HEAD
        
        # Copy the tarball to the server and extract it
        sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no project.tar.gz $SERVER_USER@$SERVER_IP:/tmp/project.tar.gz
        sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
          
          cd ~/grantgpt/
          
          # Stop services first to prevent file locks
          cd deployment/docker_compose
          docker compose -f docker-compose.prod.yml -p danswer-stack down || true
          cd ~/grantgpt/
          
          # Improved cleanup: Remove directories recursively, preserve specific paths
          # Remove all top-level items except 'deployment' directory
          for item in *; do
            if [ "$item" != "deployment" ] && [ "$item" != "." ] && [ "$item" != ".." ]; then
              rm -rf "$item"
            fi
          done
          
          # Remove all hidden files/directories at root except .git if it exists
          for item in .*; do
            if [ "$item" != "." ] && [ "$item" != ".." ] && [ "$item" != ".git" ]; then
              rm -rf "$item"
            fi
          done
          
          # Clean deployment directory contents except 'data'
          if [ -d "deployment" ]; then
            cd deployment/
            for item in *; do
              if [ "$item" != "data" ] && [ "$item" != "." ] && [ "$item" != ".." ]; then
                rm -rf "$item"
              fi
            done
            
            # Clean hidden files in deployment except .git if it exists
            for item in .*; do
              if [ "$item" != "." ] && [ "$item" != ".." ] && [ "$item" != ".git" ]; then
                rm -rf "$item"
              fi
            done
            
            # Clean deployment/data contents except 'certbot'
            if [ -d "data" ]; then
              cd data/
              for item in *; do
                if [ "$item" != "certbot" ] && [ "$item" != "." ] && [ "$item" != ".." ]; then
                  rm -rf "$item"
                fi
              done
              
              # Clean hidden files in data except .git if it exists
              for item in .*; do
                if [ "$item" != "." ] && [ "$item" != ".." ] && [ "$item" != ".git" ]; then
                  rm -rf "$item"
                fi
              done
              cd ../
            fi
            cd ../
          fi
          
          # Extract new code
          mv /tmp/project.tar.gz project.tar.gz
          tar -xzf project.tar.gz
          rm project.tar.gz
          
          cd deployment/docker_compose
          
          # Copy .env files
          cp ~/env_files/.env .env
          cp ~/env_files/.env.nginx .env.nginx
          
          # Deploy
          docker compose -f docker-compose.prod.yml -p danswer-stack up -d --build --force-recreate
          
        EOF
